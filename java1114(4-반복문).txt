
public class Ex {

	public static void main(String[] args) {
		/*
		 * 반복문(Loop)
		 * - 특정 문장 또는 블럭을 주어진 조건에 따라 반복 실행하는 문
		 * - for문, while문(do-while문)  
		 * - for문과 while문은 문법적 구조는 다르지만, 동작 방식이 동일함
		 *   => 따라서, 상호 100% 전환이 가능
		 * - for문은 주로 반복 횟수가 정해져 있는 반복문에 사용하며,
		 *   while문은 주로 반복 횟수가 정해져 있지 않은 반복문에 사용
		 *   
		 * 1. for문
		 * 
		 * < 기본 문법 >
		 * for(초기식; 조건식; 증감식) {
		 * 		// 조건식이 true 일 때 반복 실행할 문장들...
		 * }
		 * 
		 * => 초기식(1) : 반복 횟수를 제어할 제어변수를 선언하고 필요에 따라 초기화 수행
		 * => 조건식(2) : 제어변수를 사용하여 반복문을 반복(종료)하는 조건식 지정
		 *                (조건식 결과가 true 일 동안 계속 반복 수행하고, false 이면 종료)
		 * => 실행문(3) : 조건식 결과가 true 일 동안 반복 실행할 문장을 기술
		 *                (한 문장 또는 여러 문장)
		 * => 증감식(4) : 실행문 실행 후 조건식으로 이동하기 전 제어변수를 증감시킴
		 * => 초기식 -> 조건식 -> 실행문 -> 증감식 -> 조건식 -> 실행문... 순으로 반복
		 *    (즉, 2 -> 3 -> 4 순으로 반복하다가 조건식(2) 결과가 false 이면 반복 종료됨)
		 * 
		 */
		
		
		
		// for문을 사용하여 "Hello, World!" 문자열 출력 10번 반복
		// 초기식 : 정수형 변수 i 를 1로 초기화
		// 조건식 : 제어변수 i 가 10보다 작거나 같을 동안 반복
		// 증감식 : 제어변수 i 를 1씩 증가
		for(int i = 1; i <= 10; i++) {
			System.out.println(i + " : Hello, World!");
		}
		
		// => 제어변수 i 는 for문에서 선언되었으므로 for문이 종료되면 변수도 제거됨	

	
		/*
		 * 위의 반복문에 대한 디버깅 과정
		 * ------------------------------------------------------------------------------
		 * 제어변수(i)  조건식(i <= 10)  실행문(i + " : Hello, World!" 출력)  증감식(i++)
		 * ------------------------------------------------------------------------------
		 *     1            true         "1 : Hello, World!" 출력               1 -> 2
		 *     2            true         "2 : Hello, World!" 출력               2 -> 3
		 *     3            true         "3 : Hello, World!" 출력               3 -> 4
		 *     4            true         "4 : Hello, World!" 출력               4 -> 5
		 *     5            true         "5 : Hello, World!" 출력               5 -> 6
		 *     6            true         "6 : Hello, World!" 출력               6 -> 7
		 *     7            true         "7 : Hello, World!" 출력               7 -> 8
		 *     8            true         "8 : Hello, World!" 출력               8 -> 9
		 *     9            true         "9 : Hello, World!" 출력               9 -> 10
		 *    10            true        "10 : Hello, World!" 출력              10 -> 11
		 *    11            false          반복문 빠져나감(종료)
		 */



		
		System.out.println("======================================");

		// for문 연습

		// 제어변수 i가 1 ~ 10까지 1씩 증가하면서 i 값 출력(1 2 3 4 5 6 7 8 9 10 출력)
		for(int i = 1; i <= 10; i++) {
			System.out.print(i + " ");
		}
		
		System.out.println();

		
		System.out.println("-------------------------------");
		// Q1) 제어변수 i가 1 ~ 10까지 2씩 증가하면서 i 값 출력(1 3 5 7 9 출력)
		for(int i = 1; i <= 10; i += 2) {
			System.out.print(i + " ");
		}
		
		
		
		System.out.println("-------------------------------");
		// Q2) 제어변수 i가 2 ~ 10까지 2씩 증가하면서 i 값 출력(2 4 6 8 10 출력)
		for(int i = 2; i <= 10; i += 2) {
			System.out.print(i + " ");
		}
		
		
		
		System.out.println("-------------------------------");
		// Q3) 제어변수 i가 10 ~ 1까지 1씩 감소하면서 i 값 출력(10 9 8 7 6 5 4 3 2 1 출력)
		for(int i = 10; i >= 1; i--) {
			System.out.print(i + " ");
		}
		
		
		
		System.out.println("============================================");
		
		// for문에서 구성요소 제외 가능 예
		int i = 1;
		
		// 초기식을 별도로 작성하고 for문에서 초기식을 제외 가능
		// => 이 때, 초기식 뒤의 세미콜론은 그대로 기술해야한다!
		// => 단, for문 위에서 별도로 제어변수 i 를 선언하고 초기화했으므로
		//    for문 내에서 또는 for문 종료 후에도 제어변수 i 는 중복 선언 불가능!
		for(; i <= 10; i++) { 
			System.out.print(i + " ");
		}
		
		System.out.println();
		System.out.println("for문 종료 후 제어변수 i = " + i);
		// => 제어변수 i가 for문보다 윗쪽에 선언되어있으므로
		//    for문 종료 후에도 변수에 접근 가능
		
//		for(int i = 10; i <= 10; i++) {} // 제어변수 i 중복 선언 불가
		// 만약, 제어변수 i 의 값만 변경하려면 선언 코드만 제외하고 사용
		for(i = 10; i <= 10; i++) {}
		
	}

}



















