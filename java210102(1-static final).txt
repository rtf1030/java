
public class Ex2 {

   public static void main(String[] args) {
      /*
       * static 키워드
       * - static 키워드를 사용한 대상은 인스턴스 생성 전에 
       *   클래스가 메모리에 로딩될 때 함께 로딩됨
       * - 멤버변수에 static 적용 시 클래스가 로딩될 때 method area 에 로딩되며
       *   모든 인스턴스가 하나의 변수를 공유하게 되며, 클래스명만으로 접근 가능 
       * 
       * static final 상수
       * - 클래스가 로딩될 때 메모리에 로딩되며, 모든 인스턴스가 하나의 변수를 공유하고,
       *   클래스명만으로 접근 가능 = static 키워드 특징
       * - 값 변경 불가능 = final 키워드 특징
       * - 진정한 의미의 상수(Constant)
       * - 변수를 상수로 선언할 때 일반 변수와 구분하기 위해 이름을 모두 대문자로 작성
       *   (단어의 구분을 위해 언더스코어(_)를 사용)
       *   ex) int finalMember 변수를 상수로 선언하면 static final int FINAL_MEMBER;
       * - 대표적인 static final 상수의 예 : Math.PI(파이값) 등
       * - static 과 final 의 순서는 무관하나, 보통 static 을 먼저 표기
       * 
       * < 기본 문법 >
       * [접근제한자] static final 상수명 = 값;
       */
      
      // 차량 예약을 위해 예약 정보를 문자열로 입력한다고 가정
      // => 상수를 사용하지 않고 값을 직접 입력하는 경우
      //    잘못된 값을 입력하거나 존재하지 않는 값을 입력할 수도 있기 때문에
      //    값의 오류가 발생할 확률이 높다!
      Car c1 = new Car();
      c1.company = "Hyundai";
      c1.modelName = "쏘나타";
      c1.color = 0xFFFFFFF; 
      
      // 제조사가 현대자동차인지 판별
      if(c1.company.equals("HYUNDAI")) {
         // c1 인스턴스의 company 변수값과 "HYUNDAI" 문자열을 비교하여
         // 두 문자열이 동일할 경우 if 블록내의 코드를 실행하게 됨        
         System.out.println("현대자동차입니다!"); 
      } else {
         System.out.println("현대자동차가 아닙니다!");
      }
      
      // 모델명이 쏘나타인지 판별
      if(c1.modelName.equals("SONATA")) {
         System.out.println("쏘나타입니다!");
      } else {
         System.out.println("쏘나타가 아닙니다!");
      }
      
      if(c1.color == 0xFFFFFF) {
         System.out.println("흰색입니다!");
      } else if(c1.color == 0xFFFF00) {
         System.out.println("노란색입니다!");
      }
      
      System.out.println("=========================");
      
      ConstantCar c2 = new ConstantCar();
      // 멤버변수가 private 접근제한자가 적용되어 외부에서 접근이 불가능하므로
      // Getter/Setter 를 호출하여 간접적으로 접근해야함
      // => 이 때, static final 로 선언된 상수를 활용하면 잘못된 값을 저장하는 것을 방지함
      //    상수 선택 시 클래스명만으로 목록에서 쉽게 선택 가능
      c2.setCompany(ConstantCar.COMPANY_HYUNDAI);
      c2.setModelName(ConstantCar.MODEL_SONATA);
      c2.setColor(ConstantCar.COLOR_PERFECT_BLACK);
      
      // 제조사가 현대자동차인지 판별
      // => 비교 데이터를 직접 입력하지 않고, 상수를 가져와서 비교 가능하므로 안전하다!
      if(c2.getCompany().equals(ConstantCar.COMPANY_HYUNDAI)) {
         System.out.println("현대자동차입니다!");
      } else if(c2.getCompany().equals(ConstantCar.COMPANY_KIA)) { 
         System.out.println("기아자동차입니다!");
      } else {
         System.out.println("현대 또는 기아자동차가 아닙니다!");
      }
      
      // 모델명판별
      if(c2.getModelName().equals(ConstantCar.MODEL_SONATA)) {
         System.out.println("쏘나타입니다!");
      } else if(c2.getModelName().equals(ConstantCar.MODEL_K5)) {
         System.out.println("K5입니다!");
      }  
      
      // 색상판별
      if(c2.getColor() == ConstantCar.COLOR_PERFECT_BLACK) {
         System.out.println("검정색입니다!");
      } else if(c2.getColor() == ConstantCar.COLOR_PERFECT_WHITE) {
         System.out.println("흰색입니다!");
      } else if(c2.getColor() == ConstantCar.COLOR_BARCELONA_RED) {
         System.out.println("빨간색입니다!");
      } 
      
   
      // static final 상수의 대표적인 예 : java.lang.Math 클래스의 PI 상수
      System.out.println("파이(PI)값 : " + Math.PI);
      
   }

}

// 자동차 예약 클래스
// - 차량모델명, 제조사, 색상 등을 선택하기 위해 변수를 사용할 경우
class Car {
   String company; // 제조사
   String modelName; // 모델명
   int color; // 색상(ex. 색상코드값을 16진수로 사용)
}

// 상수를 활용하여 값을 입력하도록 할 경우
class ConstantCar {
   private String company; // 제조사
   private String modelName; // 모델명
   private int color; // 색상(ex. 색상코드값을 16진수로 사용)
   
   /*
    * 잘못된 값을 입력하는 것을 방지하기 위하여
    * 값으로 사용될 데이터들을 static final 상수로 선언하여 사용자가 선택하도록 제공
    * => 외부에서 값을 사용할 때 클래스명만으로 상수를 선택할 수 있고,
    *    함부로 값을 변경하지 못하므로 고정된 값을 저장하는데 유리함
    * => 또한, 실제 저장된 데이터와 무관하게 상수의 이름만 알면 데이터 사용이 가능하므로
    *    잘못된 값을 사용할 위험성도 제거됨
    */
   // 제조사를 저장하는 상수
   static final String COMPANY_HYUNDAI = "HYUNDAI";
   static final String COMPANY_KIA = "KIA";
   
   // 모델명을 저장하는 상수
   static final String MODEL_SONATA = "SONATA";
   static final String MODEL_K5 = "K5";
   
   // 색상코드를 저장하는 상수
   static final int COLOR_PERFECT_BLACK = 0x000000;
   static final int COLOR_PERFECT_WHITE = 0xFFFFFF;
   static final int COLOR_BARCELONA_RED = 0xFF0000;
   
   public String getCompany() {
      return company;
   }
   public void setCompany(String company) {
      this.company = company;
   }
   public String getModelName() {
      return modelName;
   }
   public void setModelName(String modelName) {
      this.modelName = modelName;
   }
   public int getColor() {
      return color;
   }
   public void setColor(int color) {
      this.color = color;
   }
   
   
}

















