/*
 * 클래스 정의
 * - 객체를 나타내는 설계도에 해당
 * - 클래스 내의 멤버변수는 인스턴스 생성 시 각 인스턴스마다 별도의 공간을 할당받음
 *   => 이 때, 각 멤버변수는 자동으로 기본값으로 초기화가 수행됨
 * - 클래스 내의 메서드는 인스턴스 생성 후 호출을 통해 작업을 수행하게 됨
 * - 클래스 정의 후에는 반드시 인스턴스화를 통해 메모리 상에 실제 객체를 생성해야함
 * 
 * < 기본 문법 >
 * [제한자] class 클래스명 {
 * 		// 멤버변수(= 객체의 정보를 저장할 변수 = 속성)
 * 		// 생성자(= 객체의 정보를 초기화하는 역할)
 * 		// 메서드(= 객체가 수행할 동작 = 기능)
 * }
 */

// Person클래스 정의
class Person {
	// 멤버변수(객체의 정보) 선언
	String name;
	int age;
	boolean isHungry;
	
	public void eat() {
		System.out.println("먹다!");
	}	
	public void talk() {
		System.out.println("말하다!");
	}
}

public class Ex {
	public static void main(String[] args) {

	/*
	* 클래스의 객체(인스턴스 = instance) 생성 = 인스턴스화
	* - new 키워드를 사용하여 인스턴스 생성
	*   => Heap 공간의 특정 위치에 클래스에 대한 인스턴스가 생성됨
	*      또한, 생성된 공간의 주소값이 리턴됨
 	* - 클래스 내에서 선언된 멤버변수는 해당 클래스 내의 모든 메서드 내에서 접근 가능
	*   (특정 메서드 내에서 선언된 변수는 해당 메서드 내에서만 접근 가능)
	*      
	* < 클래스 인스턴스 생성 기본 문법 >
	* 클래스명 변수명;
	* 변수명 = new 클래스명();
	* => 위의 두 문장을 한 문장으로 결합할 경우
	* 클래스명 변수명 = new 클래스명();
	* 
	* < 인스턴스 내의 멤버변수 및 메서드 접근 방법 >
	* 클래스타입을 통해 선언된 참조변수를 사용하여 인스턴스의 멤버에 접근
	* 1. 멤버변수 접근 : 참조변수명.멤버변수명
	* 2. 메서드 접근 : 참조변수명.메서드명()
	*/


	//Person클래스의 인스턴스생성하기(= 메모리상에 실제 객체 생성작업)
	Person p = new Person();


	System.out.println("이름(p.name) : " + p.name); 
	System.out.println("나이(p.age) : " + p.age); 
	System.out.println("배고픔(p.isHungry) : " + p.isHungry);

 
	p.eat();
	p.talk();

	
	// 일반 로컬변수 초기화
	String name;
	name = "홍길동";
	int age;
	age = 20;

	// 인스턴스의 멤버변수 초기화(값 저장)
	p.name = "홍길동";
	p.age = 20;
	p.isHungry = true;
	System.out.println("이름(p.name) : " + p.name);
	System.out.println("나이(p.age) : " + p.age);
	System.out.println("배고픔(p.isHungry) : " + p.isHungry);

	//또 다른 Person 인스턴스 생성
	Person p2 = new Person();

	p2.name = "이순신";
	p2.age = 44;
	System.out.println("이름(p2.name) : " + p2.name);
	System.out.println("나이(p2.age) : " + p2.age);
	System.out.println("배고픔(p2.isHungry) : " + p2.isHungry); 
		
		
	}
}
	
	