public class Java1126 {

	public static void main(String[] args) {
		/*
		 * 메서드 오버로딩(Method Overloading) = 메서드 다중정의
		 * - 동일한 이름의 매개변수가 다른 메서드를 여러개 정의하는 것
		 * - 동일한 이름으로 서로 다른 파라미터를 전달받아 다른 작업을 처리하도록 하는 것
		 * - 규칙1. 메서드명은 동일해야함
		 *   규칙2. 매개변수의 타입이나 갯수가 달라야함
		 *   규칙3. 리턴타입이 다른 것은 오버로딩과 무관함
		 *   규칙4. 매개변수의 변수명만 다른 것은 오버로딩과 무관함
		 *   => 즉, 메서드 호출 시점에서 전달되는 데이터에 따라 
		 *      각각 다른 메서드를 호출하도록 구분되어야 한다!
		 */

//1. 매개변수의 데이터 타입이 다른 오버로딩 메서드 호출

	OverloadingAbsNum oan = new OverloadingAbsNum();

		System.out.println("정수 10의 절대값 : " + oan.abs(10));
		System.out.println("실수 3.14의 절대값 : " + oan.abs(3.14));
		System.out.println("정수 100L의 절대값 : " + oan.abs(100L));


//2. 매개변수의 갯수가 다른 오버로딩 메서드 호출

	OverloadingMethod2 om = new OverloadingMethod2();
		om.print(1,"홍길동");
		om.print(2,"홍길동","이순신");
		om.print(3,"홍길동","이순신","강감찬");




	}

}

//1. 매개변수의 데이터 타입이 다른 오버로딩 메서드 정의

class OverloadingAbsNum{

	public int abs(int num){
	if(num<0){
		num= -num;
		}
	return num;
	}


	public double abs(double num){	
	if(num<0){
		num= -num;
		}
	return num;
	}

	public long abs(long num){
	if(num<0){
		num= -num;
		}
	return num;
	
}

// 2. 매개변수의 갯수가 다른 오버로딩 메서드 정의하기

class OverloadingMethod2{
	
	public void print(int count, String name){
		System.out.println(count + "명 :" + name);

	}
	public void print(int count, String name, String name2){
		System.out.println(count + "명 : " + name + ", " + name2);	
	}
	public void print(int count, String name, String name2, String name3){
		System.out.println(count + "명 : " + name + ", " + name2 + ", " + name3);
	}


}

