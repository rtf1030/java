
public class Test2 {

	public static void main(String[] args) {
		ItwillBank ib = new ItwillBank("111-111-111", "홍길동", 10000, true);
		// VIP 일 경우 잔액이 부족해도 출금 가능
		System.out.println("출금된 금액 : " + ib.withdraw(99999999));
		
		System.out.println("============================================");
		ItwillBank ib2 = new ItwillBank("111-111-111", "홍길동", 10000, false);
		// VIP 가 아닐 경우 잔액이 부족하면 출금 불가능
		System.out.println("출금된 금액 : " + ib2.withdraw(99999999));
		System.out.println("------------------------------------");
		// VIP 가 아니더라도 잔액이 충분하면 출금 가능
		System.out.println("출금된 금액 : " + ib2.withdraw(500));
	}

}

class Account {
	String accountNo;
	String ownerName;
	int balance;
	
//	public Account() {} // 기본생성자
	
	// 계좌번호, 예금주명, 현재잔고를 전달받아 초기화하는 생성자 정의
	public Account(String accountNo, String ownerName, int balance) {
		this.accountNo = accountNo;
		this.ownerName = ownerName;
		this.balance = balance;
	}
	
	public void showAccountInfo() {
		System.out.println("계좌번호 : " + accountNo);
		System.out.println("예금주명 : " + ownerName);
		System.out.println("현재잔고 : " + balance + "원");
	}

	// 입금 기능
	public void deposit(int amount) {
		// 전달받은 입금금액(amount)을 현재잔고(balance)에 누적
		balance += amount;
		System.out.println("입금금액 : " + amount + "원");
		System.out.println("현재잔고 : " + balance + "원");
	}
	
	// 출금 기능
	public int withdraw(int amount) {
		// 전달받은 출금할금액(amount)을 현재잔고와 비교하여 출금 가능 여부 판별
		if(amount > balance) { // 출금이 불가능한 경우(출금할금액 > 현재잔고)
			System.out.println("출금할 금액 : " + amount + "원");
			System.out.println("잔액이 부족하여 출금 불가! (현재잔고 : " + balance + "원)");
			
			return 0; // 출금이 불가능하므로 0원 리턴
		} else { // 출금이 가능한 경우(출금할금액 <= 현재잔고)
			balance -= amount; // 출금 금액만큼 차감
			System.out.println("출금할 금액 : " + amount + "원");
			System.out.println("출금 후 현재잔고 : " + balance + "원");
			
			return amount; // 출금된 금액 리턴
		}
		
	}
}

/*
 * Account 클래스를 상속받는 ItwillBank 클래스 정의
 * 멤버변수 : 보험명(insureName, 문자열)
 */
class ItwillBank extends Account {
	boolean isVip; // VIP 여부

	// 슈퍼클래스인 Account 클래스에 기본생성자가 정의되어 있지 않고,
	// 파라미터 생성자만 정의되어 있기 때문에 서브클래스에서 기본 생성자 호출 시 오류 발생!
	// => 해결책1. 슈퍼클래스에서 기본생성자 Account() 를 정의
	// => 해결책2. 슈퍼클래스의 파라미터 생성자를 명시적으로 호출
	//    이 때, 상속받은 멤버변수의 초기화까지 간접적으로 수행 가능하므로 코드 중복도 제거됨
	public ItwillBank(String accountNo, String ownerName, int balance, boolean isVip) {
		super(accountNo, ownerName, balance);
		this.isVip = isVip;
	}
	
	// 슈퍼클래스의 withdraw() 메서드 오버라이딩
	// VIP(isVip 가 true) 일 경우 은행잔고에 관계없이 출금을 수행하고
	// 아니면, 은행잔고에 따라 출금 가능/불가 여부가 결정되도록 수행
	@Override
	public int withdraw(int amount) {
		if(!isVip) { // VIP 가 아닐 때
//			if(amount > balance) { // 출금이 불가능한 경우(출금할금액 > 현재잔고)
//				System.out.println("출금할 금액 : " + amount + "원");
//				System.out.println("잔액이 부족하여 출금 불가! (현재잔고 : " + balance + "원)");
//				
//				return 0; // 출금이 불가능하므로 0원 리턴
//			} else {
//				// 출금이 가능한 경우(출금할금액 <= 현재잔고)
//				balance -= amount; // 출금 금액만큼 차감
//				System.out.println("출금할 금액 : " + amount + "원");
//				System.out.println("출금 후 현재잔고 : " + balance + "원");
//				
//				return amount; // 출금된 금액 리턴
//			}
			
			// 위의 코드는 Account 클래스의 withdraw() 메서드의 코드와 중복되므로
			// 중복 제거를 위해 Account 클래스의 withdraw() 메서드를 호출하여
			// 리턴되는 값을 자신의 출금금액(amount)로 전달받으면 중복 제거됨
			amount = super.withdraw(amount);
		} else {
			// VIP 일 때
			// 출금이 가능한 경우(출금할금액 <= 현재잔고)
			balance -= amount; // 출금 금액만큼 차감
			System.out.println("출금할 금액 : " + amount + "원");
			System.out.println("출금 후 현재잔고 : " + balance + "원");
		}
		
		return amount; // 출금된 금액 리턴
		
	}
	
}











