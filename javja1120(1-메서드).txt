
public class Ex {

	public static void main(String[] args) {
		/*
		 * 메서드(Method)
		 * - 객체의 동작을 나타내는 최소 단위
		 * - 메서드를 정의한 후에는 반드시 호출되어야만 사용 가능
		 *   이 때, 호출하는 메서드를 Caller, 호출 당하는 메서드를 Worker 라고 함
		 * - 메서드는 선언부(Header)와 구현부(Body, {}) 로 구분됨
		 * - main() 메서드도 메서드의 일종
		 *   => JVM 에 의해 자동으로 호출되는 메서드 = 프로그램의 시작점
		 * - 메서드를 호출할 때 전달하는 값을 전달인자(Argument)라고 하며
		 *   이 값을 메서드에서 전달받기 위해 선언하는 변수를 매개변수(Parameter)라고 함
		 *   => 이 때, 메서드 호출 시 전달하는 값이 없을 수도 있다!
		 *   => 메서드를 호출할 때 반드시 선언부의 매개변수 타입과 갯수에 맞게
		 *      데이터를 전달하여 호출해야한다!
		 * - 메서드 수행이 끝날 때 호출한 곳으로 전달할(되돌려줄) 값을 리턴값이라고 하며
		 *   리턴값에 해당하는 데이터타입을 리턴타입 부분에 명시해야함
		 *   => 메서드 수행 후 리턴값이 없을 수도 있다!
		 *      만약, 리턴값이 없을 경우 리턴타입에 반드시 void 라는 타입을 명시해야한다!
		 *   => 한 번에 리턴 가능한 데이터는 한 개이다!
		 * - 메서드 수행이 종료되면, 반드시 메서드를 호출한 곳으로 돌아와야함
		 *   이 때, 리턴값이 존재한다면 호출한 곳으로 돌아올 때 가지고 옴 
		 *   
		 *
		 * < 메서드 정의 방법(형태)에 따른 분류 >
		 * 1. 매개변수가 없고, 리턴값도 없는 메서드
		 * 2. 매개변수는 없고, 리턴값만 있는 메서드
		 * 3. 매개변수만 있고, 리턴값은 없는 메서드
		 * 4. 매개변수도 있고, 리턴값도 있는 메서드
		 * ----------------------------------------
		 * 추가5. 매개변수가 2개 이상인 메서드(리턴값은 무관)
		 * 
		 * < 메서드 정의 기본 문법 >
		 * [제한자] 리턴타입 메서드명([매개변수...]) {
		 * 		// 메서드가 호출되었을 때 실행할 코드들...
		 * }
		 */
		
		// 1. 매개변수가 없고, 리턴값도 없는 메서드 호출
		// => 매개변수가 없으므로 메서드 호출 시 소괄호() 안에 아무 데이터도 전달하지 않음
		// => 리턴값이 없으므로 메서드 호출 결과를 저장할 변수를 선언하거나
		//    출력문 등의 내부에서 메서드 호출 불가능하며, 단독으로 호출해야한다!
		System.out.println("동생아! 불 좀 꺼라!");
		sister_1(); // sister_1() 메서드 호출 => 코드 흐름이 메서드쪽으로 변경됨
		System.out.println("동생이 불을 껐다!");
		
		System.out.println("-----------------------------------");
		
		// 2. 매개변수는 없고, 리턴값만 있는 메서드
		// => 매개변수가 없으므로 메서드 호출 시 소괄호() 안에 아무 데이터도 전달하지 않음
		// => 리턴값이 있으므로(String 타입) 리턴값을 변수에 저장하거나
		//    메서드 호출 코드를 출력문 내에서 기술하여 리턴값을 바로 출력
		System.out.println("동생아! 물 좀 떠줘!");
//		String result = sister_2(); // sister_2() 메서드 호출 후 리턴값을 변수에 저장
		// => String result = "물"; 과 동일한 코드로 사용됨
//		System.out.println("동생이 갖다준 것 : " + result);
		
		// 리턴값을 변수에 저장하지 않고, 출력문에서 바로 사용할 경우
		// => 출력문 내에서 메서드 호출 코드가 실행되도록 하면 됨
		System.out.println("동생이 갖다준 것 : " + sister_2());
		
		// 만약, 출력문을 사용하지 않고, 변수도 선언하지 않으면
		// 리턴값은 그냥 버려지게 됨(코드 오류는 발생하지 않는다!)
//		sister_2(); // 리턴값이 돌아오더라도 사용되지 못하고 버려짐
		
		System.out.println("-----------------------------------");
		// 3. 매개변수만 있고, 리턴값은 없는 메서드 호출
		System.out.println("동생아! 200원 줄테니 과자 사먹어라!");
		// => 매개변수가 있으므로 메서드 호출 시 소괄호() 안에 
		//    매개변수와 일치하는 데이터타입의 데이터를 전달해야함
		//    리터럴을 직접 전달하거나, 변수 값을 전달 가능
		// => 리턴값이 없으므로 메서드 호출 결과를 저장할 변수를 선언하거나
		//    출력문 등의 내부에서 메서드 호출 불가능하며, 단독으로 호출해야한다! 
		sister_3(200); // sister_3() 메서드 호출 시 전달인자로 정수리터럴 200을 전달
//		int money = 200; // 변수를 선언하여 데이터를 저장한 뒤
//		sister_3(money); // 해당 변수를 전달인자로 전달도 가능함
		
		System.out.println("-----------------------------------");
		// 4. 매개변수도 있고, 리턴값도 있는 메서드 호출
		// => 매개변수가 있으므로 메서드 호출 시 소괄호() 안에 
		//    매개변수와 일치하는 데이터타입의 데이터를 전달해야함
		// => 리턴값이 있으므로(String 타입) 리턴값을 변수에 저장하거나
		//    메서드 호출 코드를 출력문 내에서 기술하여 리턴값을 바로 출력
		System.out.println("동생아! 1000원 줄테니 나도 새우깡 좀 사다도!");
		String snack = sister_4(1000); // 메서드 호출 시 1000을 전달, 리턴값을 snack 변수에 저장
		System.out.println("동생이 사다준 것 : " + snack);
		
		System.out.println("-----------------------------------");
		// 추가5. 매개변수가 2개 이상인 메서드(리턴값은 무관) 호출
		// => 참고! 리턴값은 2개 이상 사용 불가능
		System.out.println("동생아! 새우깡과 1000원 줄테니 쿠쿠다스로 바꿔와!");
		String snack2 = sister_5("새우깡", 1000);
		System.out.println("동생이 바꿔다준 것 : " + snack2);
		
	} // main() 메서드 끝
	
	/*
	 * < 메서드 정의 기본 문법 >
	 * [제한자] 리턴타입 메서드명([매개변수...]) {
	 * 		// 메서드가 호출되었을 때 실행할 코드들...
	 * 		[return [값];]
	 * }
	 */

	// =================================================================
	// 추가5. 매개변수가 2개 이상인 메서드(리턴값은 무관)
	// => 매개변수가 2개(String, int)이므로 메서드 선언부 매개변수 선언도
	//    String 타입과 int 타입 순으로 선언해야한다! (순서 필수!)
	public static String sister_5(String snack, int money) {
		System.out.println("동생 : 오빠가 과자 바꿔오라고 " + snack + "과 " + money + "원을 줬다!");
		snack = "쿠쿠다스";
		System.out.println("동생 : " + snack + " 로 바꿨다!");
		return snack;
	}
	
	// =================================================================
	// 4. 매개변수도 있고, 리턴값도 있는 메서드 정의
	// => 리턴값이 있으므로 리턴할 데이터의 데이터타입을 리턴타입에 기술
	// => 매개변수가 있으므로 전달받는 데이터의 데이터타입과 일치하는 변수 선언 필수
	public static 
	String sister_4(int money) {
		System.out.println("동생 : 오빠가 과자 사오라고 " + money + "원을 줬다!");
		money -= 200;
		System.out.println("동생 : 새우깡 사고 " + money + "원이 남았다!");
		
		// 리턴할 데이터가 있으므로 return 문 뒤에 리턴할 데이터(String 타입)를 명시
		return "새우깡"; // 리터럴을 직접 리턴하거나 변수값 리턴 가능
		// => 단, 리턴값으로 전달할 값은 동시에 1개만 리턴 가능하므로
		//    "새우깡"만 리턴 가능하고, 잔돈 800원은 리턴 불가능
	}
	// =================================================================
	// 3. 매개변수만 있고, 리턴값은 없는 메서드 정의
	// => 리턴값이 없으므로 리턴타입에 void 타입 명시(생략 불가)
	// => 매개변수가 있으므로 전달받는 데이터의 데이터타입과 일치하는 변수 선언 필수
	public static void sister_3(int money) { // 정수형 데이터 1개를 전달받음
		// 전달받은 전달인자가 매개변수에 저장이 되고, 메서드 내에서 자유롭게 사용 가능
		// 매개변수에 전달되는 값 x는 int money = x; 와 동일한 코드가 됨
		System.out.println("동생 : 오빠가 과자 사먹으라고 " + money + "원을 줬다!");
		money -= 200;
		System.out.println("동생 : 새우깡 사먹고 " + money + "원이 남았다!");
		// 리턴할 데이터가 없으므로 return; 문을 사용하거나 생략
	}
	
	// =================================================================
	// 2. 매개변수는 없고, 리턴값만 있는 메서드 정의
	// => 리턴값이 있으므로 리턴할 데이터의 데이터타입을 리턴타입에 기술
	//    만약, 문자열을 리턴 시 String, 정수를 리턴 시 int 타입을 기술
	//    리턴타입을 기술하고 아무 값도 리턴하지 않으면 오류 발생
	//    (This method must return a result of type XXX => XXX 타입 데이터를 반드시 리턴해라!)
	// => 매개변수가 없으므로 메서드 선언부 소괄호() 안에 아무것도 기술하지 않음
	public static String sister_2() {
		System.out.println("동생 : 오빠가 물을 떠오라고 시켰다!");
		
		// 리턴타입을 기술한 경우 반드시 return 문 뒤에 return 할 데이터를 기술해야한다!
		// => 리턴할 데이터는 리터럴 또는 변수 모두 지정 가능
//		return "물"; // String 타입 리터럴을 직접 리턴
		
		String result = "물"; // 리턴할 데이터를 변수에 저장한 후
		return result; // 변수 값을 리턴할 수도 있음
		// => 문자열 "물" 을 가지고 호출한 곳으로 돌아감
	}
	
	// ===============================================================
	// 1. 매개변수가 없고, 리턴값도 없는 메서드 정의
	// => 리턴값이 없으므로 리턴타입에 void 타입 명시(생략 불가)
	// => 매개변수가 없으므로 메서드 선언부 소괄호() 안에 아무것도 기술하지 않음
	public static void sister_1() {
		System.out.println("동생 : 오빠가 불을 끄라고 시켜서 불을 껐다!");
		// 리턴값이 없을 경우 return; 문장을 사용하여 되돌아가거나
//		return; // 메서드 수행 중이더라도 메서드를 종료하고 호출한 곳으로 돌아감
		
		// 중괄호 끝(}) 부분을 만나면 자동으로 되돌아감(return; 문장 생략 가능)
	} // 메서드 수행이 종료되면 실행 흐름이 호출한 곳(sister_1())으로 되돌아감
	

}















