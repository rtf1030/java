
public class Java1119 {

	public static void main(String[] args) {
		/*
		 * 다차원 배열
		 * - 1차원 배열 여러개가 모여 2차원 이상의 배열을 이루는 것
		 * - 일반적으로 다차원 배열 = 2차원 배열을 의미
		 * 
		 * 2차원 배열
		 * - 행, 열의 구조로 이루어진 배열
		 * - 실제 데이터가 저장되는 공간 = 열
		 *   열 공간의 주소를 저장하는 공간 = 행
		 * - 배열 크기
		 *   1) 행 크기 : 배열명.length
		 *   2) 열 크기 : 배열명[행인덱스].length
		 *
		 * < 2차원 배열 선언 기본 문법 >
		 * 데이터타입[][] 변수명;
		 * 
		 * < 2차원 배열 생성 기본 문법 >
		 * 변수명 = new 데이터타입[행크기][열크기];
		 * 
		 * < 2차원 배열 인덱스 접근 기본 문법 >
		 * 변수명[행인덱스][열인덱스];
		 * 
		 * < 2차원 배열 내의 모든 요소 접근을 위한 for문 >
		 * for(int i = 0; i < 배열명.length; i++) { // 바깥쪽 for문 = 행 반복
		 * 		for(int j = 0; j < 배열명[i].length; j++) { // 안쪽 for문 = i행의 열 반복
		 * 			// 배열명[i][j] 를 사용하여 배열 각 요소 접근
		 * 		}
		 * }
		 * 
		 * < 2차원 배열 선언 및 생성, 초기화를 한꺼번에 수행하는 방법 >
		 * 데이터타입[][] 변수명 = {
		 * 		{0행데이터1, 0행데이터2, ... , 0행데이터n},
		 * 		{1행데이터1, 1행데이터2, ... , 1행데이터n},
		 * 		...생략...
		 * 		{x행데이터1, x행데이터2, ... , x행데이터n}
		 * }; 
		 * => 바깥 중괄호{} 내의 안쪽 중괄호{} 갯수 : 행의 갯수
		 * => 안쪽 중괄호 내의 데이터 갯수 : 각 행의 열의 갯수
		 */
		
		// 2차원 배열 선언
		int[][] arr;
		
		// 2행 3열 크기의 2차원 배열 arr 생성
		arr = new int[2][3];
		
		// 2행 3열 구조의 2차원 배열에 데이터 저장
		//       0열   1열   2열
		// 0행    1     2     3
		// 1행    4     5     6
		arr[0][0] = 1; arr[0][1] = 2; arr[0][2] = 3;
		arr[1][0] = 4; arr[1][1] = 5; arr[1][2] = 6;
		
//		System.out.println(arr[0][0] + " " + arr[0][1] + " " + arr[0][2]);
//		System.out.println(arr[1][0] + " " + arr[1][1] + " " + arr[1][2]);
		System.out.println(arr[0][0]);
		System.out.println(arr[0][1]);
		System.out.println(arr[0][2]);
		System.out.println(arr[1][0]);
		System.out.println(arr[1][1]);
		System.out.println(arr[1][2]);
		
		// for문을 사용하여 2차원 배열의 모든 요소에 접근
		for(int i = 0; i <= 1; i++) { // 바깥쪽 for문 = 행(0 ~ 1) 반복
			
			for(int j = 0; j <= 2; j++) { // 안쪽 for문 = 열(0 ~ 2) 반복
				System.out.println(arr[i][j]); // 배열[i행][j열] 인덱스 요소 출력
			}
			
		}
		
		// 배열 크기
		System.out.println("배열 arr 의 행 크기 : " + arr.length);
		System.out.println("배열 arr 의 0번 행의 열 크기 : " + arr[0].length);
		System.out.println("배열 arr 의 1번 행의 열 크기 : " + arr[1].length);
		
		// for문을 사용하여 2차원 배열의 모든 요소에 접근(length 속성 활용)
		for(int i = 0; i < arr.length; i++) { // 바깥쪽 for문 = 행(0 ~ 1) 반복
			
			for(int j = 0; j < arr[i].length; j++) { // 안쪽 for문 = 열(0 ~ 2) 반복
				System.out.println(arr[i][j]); // 배열[i행][j열] 인덱스 요소 출력
			}
			
		}
		
		System.out.println("=======================================");
		
		// 배열 선언 및 생성, 초기화를 한꺼번에 수행
		int[][] arr2 = {
				{1, 2, 3}, // 0행{0열, 1열, 2열}
				{4, 5, 6}  // 1행{0열, 1열, 2열}
		};
		
		for(int i = 0; i < arr2.length; i++) {
			
			for(int j = 0; j < arr2[i].length; j++) {
				
				System.out.print(arr2[i][j] + " ");
				
			}
			
			System.out.println(); // 줄바꿈
		}
		
		System.out.println("================================");
		// 2차원 배열에서 각 행의 열 갯수가 동일하지 않을 수 있다!
		// -----------------------------------------
		// 1. 데이터를 한꺼번에 초기화하는 방법
//		int[][] arr3 = {
//				{1, 2, 3}, // 0행 = 3열
//				{4, 5}, // 1행 = 2열
//				{6, 7, 8, 9, 10} // 2행 = 5열
//		};
		// -----------------------------------------
		// 2. 행을 먼저 생성하고 열을 각각 별도로 생성하는 방법
		int[][] arr3 = new int[3][]; // 3행을 먼저 생성
		// 각 행에 열을 별도로 생성
//		arr3[0] = new int[3]; // 0번 행에 1차원 배열 3칸짜리(3열)를 생성
//		arr3[1] = new int[2]; // 1번 행에 1차원 배열 2칸짜리(2열)를 생성
//		arr3[2] = new int[5]; // 2번 행에 1차원 배열 5칸짜리(5열)를 생성
		
//		arr3[0][0] = 1; arr3[0][1] = 2; arr3[0][2] = 3;
//		arr3[1][0] = 4; arr3[1][1] = 5;
//		arr3[2][0] = 6; arr3[2][1] = 7; arr3[2][2] = 8; arr3[2][3] = 9; arr3[2][4] = 10;

		// 또는 1개 열을 한꺼번에 초기화도 가능
		arr3[0] = new int[] {1, 2, 3};
		arr3[1] = new int[] {4, 5};
		arr3[2] = new int[] {6, 7, 8, 9, 10};
		// -----------------------------------------		
		
		// for문 공식을 사용하여 배열 접근 시 균등하지 않은 배열도 접근 코드 동일함
		for(int i = 0; i < arr3.length; i++) {
			
			for(int j = 0; j < arr3[i].length; j++) {
				
				System.out.print(arr3[i][j] + " ");
				
			}
			
			System.out.println(); // 줄바꿈
		}
		
		
	}

}

















